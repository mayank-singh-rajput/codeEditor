{"ast":null,"code":"export const cppBoiler = `#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tcout<<\"Hello World!\"<<endl;\n\treturn 0;\n}\n`;\nexport const pyBoiler = `print(\"Hello World!\")`;\nexport const jsBoiler = `console.log(\"Hello World\");`;\nconst assemblyBoiler = `section .data\n    msg db \"Hello, World!\",0xa\nsection .text\n    global _start\n_start:\n    ; write(1, msg, 13)\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, msg\n    mov edx, 13\n    int 0x80\n    ; exit(0)\n    mov eax, 1\n    xor ebx, ebx\n    int 0x80`;\nconst bashBoiler = `#!/bin/bash\necho \"Hello, World!\"\n`;\nconst basicBoiler = `PRINT \"Hello, World!\"`;\nconst cBoiler = `#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}`;\nconst clojureBoiler = `(println \"Hello, World!\")`;\nconst cSharpBoiler = `using System;\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}`;\nconst cobolBoiler = `IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY \"Hello, World!\".\n    STOP RUN.`;\nconst commonLispBoiler = `(format t \"Hello, World!~%\")`;\nconst dBoiler = `import std.stdio;\n\nvoid main() {\n    writeln(\"Hello, World!\");\n}\n`;\nconst elixirBoiler = `IO.puts \"Hello, World!\"`;\nconst erLangBoiler = `-module(hello).\n-export([hello_world/0]).\n\nhello_world() -> io:fwrite(\"Hello, World!\\n\").`;\nconst fSharpBoiler = `printfn \"Hello, World!\"`;\nconst fortranBoiler = `program hello\nwrite(*,*) \"Hello, World!\"\nend program hello`;\nconst goBoiler = `package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}`;\nconst groovyBoiler = `println \"Hello, World!\"`;\nconst haskellBoiler = `main = putStrLn \"Hello, World!\"`;\nconst javaBoiler = `public class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}`;\nconst kotlinBoiler = `fun main() {\n\tprintln(\"Hello, World!\")\n}`;\nconst luaBoiler = `print(\"Hello, World!\")`;\nconst objectCBoiler = `#import <Foundation/Foundation.h>\n\nint main() {\n    @autoreleasepool {\n        NSLog(@\"Hello, World!\");\n    }\n    return 0;\n}\n`;\nconst oCamlBoiler = `print_endline \"Hello, World!\"`;\nconst octaveBoiler = `printf(\"Hello, World!\\n\")`;\nconst pascalBoiler = `program hello;\nbegin\n    writeln('Hello, World!');\nend.`;\nconst perlBoiler = `print \"Hello, World!\\n\";`;\nconst phpBoiler = `<?php\necho \"Hello, World!\\n\";\n?>\n`;\nconst py2Boiler = `print \"Hello, World!\"`;\nconst py3Boiler = `print(\"Hello, World!\")`;\nconst rBoiler = `cat(\"Hello, World!\\n\")`;\nconst rubyBoiler = `puts \"Hello, World!\"`;\nconst rustBoiler = `fn main() {\n\tprintln!(\"Hello, World!\");\n}`;\nconst scalaBoiler = `object HelloWorld {\n  def main(args: Array[String]) {\n    println(\"Hello, World!\")\n  }\n}\n`;\nconst switfBoiler = `print(\"Hello, World!\")`;\nconst typescriptBoiler = `console.log(\"Hello, World!\");`;\nconst visualBasicBoiler = `Module HelloWorld\nSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\nEnd Sub\nEnd Module`;\nexport const boilerCodes = languageId => {\n  switch (languageId) {\n    case 45:\n      return assemblyBoiler;\n    case 46:\n      return bashBoiler;\n    case 47:\n      return basicBoiler;\n    case 50:\n      return cBoiler;\n    case 51:\n      return cSharpBoiler;\n    case 54:\n      return cppBoiler;\n    case 55:\n      return commonLispBoiler;\n    case 56:\n      return dBoiler;\n    case 57:\n      return elixirBoiler;\n    case 58:\n      return erLangBoiler;\n    case 59:\n      return fortranBoiler;\n    case 60:\n      return goBoiler;\n    case 61:\n      return haskellBoiler;\n    case 62:\n      return javaBoiler;\n    case 63:\n      return jsBoiler;\n    case 64:\n      return luaBoiler;\n    case 65:\n      return oCamlBoiler;\n    case 66:\n      return octaveBoiler;\n    case 67:\n      return pascalBoiler;\n    case 68:\n      return phpBoiler;\n    case 69:\n      return '';\n    case 70:\n      return py2Boiler;\n    case 71:\n      return py3Boiler;\n    case 72:\n      return rubyBoiler;\n    case 73:\n      return rustBoiler;\n    case 74:\n      return typescriptBoiler;\n    case 77:\n      return cobolBoiler;\n    case 78:\n      return kotlinBoiler;\n    case 79:\n      return objectCBoiler;\n    case 80:\n      return rBoiler;\n    case 81:\n      return scalaBoiler;\n    case 82:\n      return '';\n    case 83:\n      return switfBoiler;\n    case 84:\n      return visualBasicBoiler;\n    case 85:\n      return perlBoiler;\n    case 86:\n      return clojureBoiler;\n    default:\n      return '';\n  }\n};","map":{"version":3,"names":["cppBoiler","pyBoiler","jsBoiler","assemblyBoiler","bashBoiler","basicBoiler","cBoiler","clojureBoiler","cSharpBoiler","cobolBoiler","commonLispBoiler","dBoiler","elixirBoiler","erLangBoiler","fSharpBoiler","fortranBoiler","goBoiler","groovyBoiler","haskellBoiler","javaBoiler","kotlinBoiler","luaBoiler","objectCBoiler","oCamlBoiler","octaveBoiler","pascalBoiler","perlBoiler","phpBoiler","py2Boiler","py3Boiler","rBoiler","rubyBoiler","rustBoiler","scalaBoiler","switfBoiler","typescriptBoiler","visualBasicBoiler","boilerCodes","languageId"],"sources":["C:/Users/mayan/Downloads/Leetcode-Ide-main/Leetcode-Ide-main/client/src/boilerCodes/index.js"],"sourcesContent":["export const cppBoiler = `#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tcout<<\"Hello World!\"<<endl;\n\treturn 0;\n}\n`;\nexport const pyBoiler = `print(\"Hello World!\")`;\nexport const jsBoiler = `console.log(\"Hello World\");`;\nconst assemblyBoiler = `section .data\n    msg db \"Hello, World!\",0xa\nsection .text\n    global _start\n_start:\n    ; write(1, msg, 13)\n    mov eax, 4\n    mov ebx, 1\n    mov ecx, msg\n    mov edx, 13\n    int 0x80\n    ; exit(0)\n    mov eax, 1\n    xor ebx, ebx\n    int 0x80`;\nconst bashBoiler = `#!/bin/bash\necho \"Hello, World!\"\n`;\nconst basicBoiler = `PRINT \"Hello, World!\"`;\nconst cBoiler = `#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}`;\n\nconst clojureBoiler = `(println \"Hello, World!\")`;\nconst cSharpBoiler = `using System;\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}`;\n\nconst cobolBoiler = `IDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO.\nPROCEDURE DIVISION.\n    DISPLAY \"Hello, World!\".\n    STOP RUN.`;\n\nconst commonLispBoiler = `(format t \"Hello, World!~%\")`;\nconst dBoiler = `import std.stdio;\n\nvoid main() {\n    writeln(\"Hello, World!\");\n}\n`;\nconst elixirBoiler = `IO.puts \"Hello, World!\"`;\nconst erLangBoiler = `-module(hello).\n-export([hello_world/0]).\n\nhello_world() -> io:fwrite(\"Hello, World!\\n\").`;\nconst fSharpBoiler = `printfn \"Hello, World!\"`;\nconst fortranBoiler = `program hello\nwrite(*,*) \"Hello, World!\"\nend program hello`;\nconst goBoiler = `package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}`;\n\nconst groovyBoiler = `println \"Hello, World!\"`;\nconst haskellBoiler = `main = putStrLn \"Hello, World!\"`;\nconst javaBoiler = `public class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}`;\nconst kotlinBoiler = `fun main() {\n\tprintln(\"Hello, World!\")\n}`;\nconst luaBoiler = `print(\"Hello, World!\")`;\nconst objectCBoiler = `#import <Foundation/Foundation.h>\n\nint main() {\n    @autoreleasepool {\n        NSLog(@\"Hello, World!\");\n    }\n    return 0;\n}\n`;\nconst oCamlBoiler = `print_endline \"Hello, World!\"`;\nconst octaveBoiler = `printf(\"Hello, World!\\n\")`;\nconst pascalBoiler = `program hello;\nbegin\n    writeln('Hello, World!');\nend.`;\nconst perlBoiler = `print \"Hello, World!\\n\";`;\nconst phpBoiler = `<?php\necho \"Hello, World!\\n\";\n?>\n`;\nconst py2Boiler = `print \"Hello, World!\"`;\nconst py3Boiler = `print(\"Hello, World!\")`;\nconst rBoiler = `cat(\"Hello, World!\\n\")`;\nconst rubyBoiler = `puts \"Hello, World!\"`;\nconst rustBoiler = `fn main() {\n\tprintln!(\"Hello, World!\");\n}`;\nconst scalaBoiler = `object HelloWorld {\n  def main(args: Array[String]) {\n    println(\"Hello, World!\")\n  }\n}\n`;\nconst switfBoiler = `print(\"Hello, World!\")`;\nconst typescriptBoiler = `console.log(\"Hello, World!\");`;\nconst visualBasicBoiler = `Module HelloWorld\nSub Main()\n\t\tConsole.WriteLine(\"Hello, World!\")\nEnd Sub\nEnd Module`;\n\nexport const boilerCodes = (languageId) => {\n\tswitch (languageId) {\n\t\tcase 45:\n\t\t\treturn assemblyBoiler;\n\t\tcase 46:\n\t\t\treturn bashBoiler;\n\t\tcase 47:\n\t\t\treturn basicBoiler;\n\t\tcase 50:\n\t\t\treturn cBoiler;\n\t\tcase 51:\n\t\t\t\treturn cSharpBoiler;\n\t\tcase 54:\n\t\t\treturn cppBoiler;\n\t\tcase 55:\n\t\t\treturn commonLispBoiler;\n\t\tcase 56:\n\t\t\treturn dBoiler;\n\t\tcase 57:\n\t\t\treturn elixirBoiler;\n\t\tcase 58:\n\t\t\treturn erLangBoiler;\n\t\tcase 59:\n\t\t\treturn fortranBoiler;\n\t\tcase 60:\n\t\t\treturn goBoiler;\n\t\tcase 61:\n\t\t\treturn haskellBoiler;\n\t\tcase 62:\n\t\t\treturn javaBoiler;\n\t\tcase 63:\n\t\t\treturn jsBoiler;\n\t\tcase 64:\n\t\t\treturn luaBoiler;\n\t\tcase 65:\n\t\t\treturn oCamlBoiler;\n\t\tcase 66:\n\t\t\treturn octaveBoiler;\n\t\tcase 67:\n\t\t\treturn pascalBoiler;\n\t\tcase 68:\n\t\t\treturn phpBoiler;\n\t\tcase 69:\n\t\t\treturn '';\n\t\tcase 70:\n\t\t\treturn py2Boiler;\n\t\tcase 71:\n\t\t\treturn py3Boiler;\n\t\tcase 72:\n\t\t\treturn rubyBoiler;\n\t\tcase 73:\n\t\t\treturn rustBoiler;\n\t\tcase 74:\n\t\t\treturn typescriptBoiler;\n\t\tcase 77:\n\t\t\treturn cobolBoiler;\n\t\tcase 78:\n\t\t\treturn kotlinBoiler;\n\t\tcase 79:\n\t\t\treturn objectCBoiler;\n\t\tcase 80:\n\t\t\treturn rBoiler;\n\t\tcase 81:\n\t\t\treturn scalaBoiler;\n\t\tcase 82:\n\t\t\treturn '';\n\t\tcase 83:\n\t\t\treturn switfBoiler;\n\t\tcase 84:\n\t\t\treturn visualBasicBoiler;\n\t\tcase 85:\n\t\t\treturn perlBoiler;\n\t\tcase 86:\n\t\t\treturn clojureBoiler;\n\n\t\tdefault:\n\t\t\treturn '';\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}